import os
from datetime import datetime
from flask import (
    Blueprint, render_template, request,
    redirect, url_for, flash, current_app, jsonify
)
from werkzeug.utils import secure_filename
from flask_login import (
    login_user, logout_user,
    login_required, current_user
)
from flask_mail import Message
from app.utils import (extract_and_save, compress_image, extract_exif_data,
        classify_image, extract_features_dict, get_random_location, 
        get_dashboard_data, generate_label_pie_chart, connect_db, get_quizz_images, 
        validate_quizz_responses, generate_unique_filename)

from app        import db, mail
from app.models import User, Image, ClassificationRule
from app.forms  import (
    LoginForm, RegisterForm,
    ChangePasswordForm, UploadAvatarForm,
    UploadForm, ClassificationRuleForm
)

# — Blueprint definitions — #

main_bp = Blueprint('main', __name__)
profile_bp = Blueprint('profile', __name__, url_prefix='/profile')
quiz_bp = Blueprint('quiz', __name__, url_prefix='/juste-dechet')


# — AUTH ROUTES — #

@main_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('main.dashboard'))
    form = LoginForm()
    if form.validate_on_submit():
        user = User.get_by_email(form.email.data)
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember.data)
            return redirect(request.args.get('next') or url_for('main.dashboard'))
        flash('Email ou mot de passe invalide.', 'danger')
    return render_template('login.html', form=form)


@main_bp.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        user = User(username=form.username.data,
                    email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash("Compte créé !", "success")
        return redirect(url_for('main.login'))
    return render_template('register.html', form=form)


@main_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Vous êtes déconnecté.', 'info')
    return redirect(url_for('main.home'))


# — APPLICATION ROUTES — #

@main_bp.route('/')
def home():
    return redirect(url_for('main.show_map'))  # ← ici, on utilise le nouveau nom

@main_bp.route('/map')
def show_map():  # ← fonction renommée
    return render_template('map.html')

@main_bp.route('/api/points')
def map_points():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, localisation, file_path, label FROM Images")
    rows = cursor.fetchall()
    points = []

    for row in rows:
        # localisation format: "(lat, lon)"
        lat_str, lon_str = row["localisation"][1:-1].split(", ")
        lat = float(lat_str)
        lon = float(lon_str)

        points.append({
            "id": row["id"],
            "lat": lat,
            "lon": lon,
            "file": row["file_path"],
            "label": row["label"]
        })

    conn.close()
    return jsonify(points)

from flask import render_template
@main_bp.route('/dashboard')
def dashboard():
    data = get_dashboard_data()
    chart_base64 = generate_label_pie_chart(data['label_accuracy'])
    return render_template('dashboard.html', data=data, chart_base64=chart_base64)

@main_bp.route('/quizz', methods=['GET', 'POST'])
def quizz():
    conn = connect_db()

    if request.method == 'POST':
        known_guesses = [request.form.get("known_0"), request.form.get("known_1")]
        known_ids = request.form.getlist("known_ids")
        unknown_id = request.form.get("unknown_id")
        unknown_guess = request.form.get("unknown_guess")

        validate_quizz_responses(known_ids, known_guesses, unknown_id, unknown_guess)
        conn.close()
        return redirect(url_for('main.quizz'))

    known_images, unknown_image = get_quizz_images(conn)
    conn.close()
    return render_template("quizz.html", known_images=known_images, unknown_image=unknown_image)


@main_bp.route('/explorer')
def explorer():
    # Récupère toutes les images en base
    images = Image.query.order_by(Image.upload_date.desc()).all()

    # Passe-les au template
    return render_template('explorer.html', images=images)

@main_bp.route('/annotate/<int:img_id>/<label>')
@login_required
# permet d'annoter depuis explorer si admin
def annotate(img_id, label):
    if current_user.role != 'admin':
        flash("Vous n'avez pas les droits pour annoter des images.", "danger")
        return redirect(url_for('main.explorer'))

    image = Image.query.get_or_404(img_id)
    if label in ['dirty', 'clean']:
        image.true_label = label
        db.session.commit()
        flash(f"L'image {image.file_path.split('/')[-1]} a été annotée comme '{label}'.", "success")
    else:
        flash("Label non reconnu.", "warning")

    return redirect(url_for('main.explorer'))

@main_bp.route('/upload', methods=['GET', 'POST'])
def upload():
    form = UploadForm()

    # 1) Identification de l'utilisateur
    if current_user.is_authenticated:
        role     = current_user.role
        username = current_user.username
    else:
        role     = 'anonyme'
        username = 'anonymous'
    img = None

    # 2) Traitement du formulaire
    if form.validate_on_submit():
        # a) Sauvegarde brute du fichier
        f = form.file.data
        filename = secure_filename(f.filename)
        filename = generate_unique_filename(filename)
        upload_dir = os.path.join(current_app.root_path, 'static', 'uploads', 'new_pics')
        os.makedirs(upload_dir, exist_ok=True)
        disk_path = os.path.join(upload_dir, filename)
        f.save(disk_path)

        # b) Extraction des métadonnées EXIF
        exif_date, localisation = extract_exif_data(disk_path)
        if localisation is None:
            localisation = get_random_location()


        # c) Compression et redimension de l’image
        newpath = compress_image(disk_path)
        webpath = os.path.basename(newpath)

        # d) Statut selon le rôle
        true_label = form.status.data if role == 'admin' else 'unknown'

        # e) Création de l'objet Image
        img = Image(
            file_path   = f'new_pics/{webpath}',
            true_label  = true_label,
            label       = 'unknown',
            username    = username,
            upload_date = exif_date or datetime.utcnow(),
            localisation= localisation or 'unknown',
            quizz       = 'pachyderm'
        )
        db.session.add(img)
        db.session.commit()

        # f) Extraction et sauvegarde des features
        pic = extract_and_save(
            img_disk_path = newpath,
            relative_path = img.file_path,
            label         = true_label
        )
        
        # g) Classification de l'image
        features_dict = extract_features_dict(newpath, true_label)
        predicted_label = classify_image(db.session, features_dict, img.id)

        # h) Mise à jour du label basé sur la classification
        img.label = predicted_label
        pic.label = predicted_label
        db.session.commit()

        # → ** Ajouter 2 points à l'utilisateur connecté **
        if current_user.is_authenticated:
            current_user.points = (current_user.points or 0) + 2
            db.session.commit()
            flash("Fichier téléversé et features extraites ! +2 points", "success")
        else:
            flash("Fichier téléversé et features extraites !", "success")

        # 3) Gestion de l'affichage à gauche
    if username != 'anonymous':
        files = (
            Image.query
                 .filter_by(username=username)
                 .order_by(Image.id.desc())
                 .all()
        )
    elif img:
        files = [img]  # juste l’image uploadée à l’instant
    else:
        files = []     # anonyme sans upload → rien

    return render_template(
        'upload.html',
        form  = UploadForm(),  # réinitialise le formulaire
        files = files,
        role  = role
    )


@quiz_bp.route('/', methods=['GET', 'POST'])
@login_required
def take_quiz():
    # 1) Pick exactly 3 images for the quiz
    images = Image.query.filter_by(quizz='pachyderm').limit(3).all()

    if request.method == 'POST':
        # 2) Award 1 point
        current_user.points = (current_user.points or 0) + 1
        db.session.commit()

        # 3) Flash a message
        flash("Quiz terminé ! +1 point", "success")

        # 4) Redirect—either back to quiz or to profile so they see their new total
        return redirect(url_for('profile.view'))

    # GET → just show the quiz
    return render_template('quizz.html', images=images)


@main_bp.route('/about')
def about():
    return render_template('about.html')


@main_bp.route('/contact')
def contact():
    return render_template('contact.html')


@main_bp.route('/submit_contact', methods=['POST'])
def submit_contact():
    name    = request.form['name']
    email   = request.form['email']
    message = request.form['message']
    try:
        msg = Message(
            subject=f"Message de {name} via Trash Map",
            recipients=['trashmapflaskemailer@gmail.com'],
            body=f"Nom: {name}\nEmail: {email}\n\nMessage:\n{message}"
        )
        mail.send(msg)
        flash("Votre message a bien été envoyé. Merci !", "success")
    except Exception as e:
        flash(f"Erreur lors de l’envoi : {e}", "danger")
    return redirect(url_for('main.contact'))


# — PROFILE ROUTE — #

@profile_bp.route('/', methods=['GET', 'POST'])
@login_required
def view():
    pwd_form    = ChangePasswordForm(prefix='pwd')
    avatar_form = UploadAvatarForm(prefix='avatar')
    

    # Changement mot de passe
    if 'pwd-submit_pwd' in request.form and pwd_form.validate():
        if current_user.check_password(pwd_form.old_password.data):
            current_user.set_password(pwd_form.new_password.data)
            db.session.commit()
            flash("Mot de passe mis à jour", "success")
            return redirect(url_for('profile.view') + "#change-pwd")
        flash("Ancien mot de passe incorrect", "danger")

    # AVATAR upload
    if 'avatar-submit_avatar' in request.form and avatar_form.validate_on_submit():
        f        = avatar_form.avatar.data
        filename = secure_filename(f.filename)
        folder   = os.path.join(current_app.config['AVATAR_UPLOAD_FOLDER'])
        os.makedirs(folder, exist_ok=True)
        f.save(os.path.join(folder, filename))
        current_user.profile_image_url = url_for('static', filename='avatars/'+filename)
        db.session.commit()
        flash("Avatar mis à jour", "success")
        return redirect(url_for('profile.view'))

    images = Image.query.filter_by(username=current_user.username).all()
    points = current_user.points

    return render_template(
        'profile.html',
        images=images,
        pwd_form=pwd_form,
        avatar_form=avatar_form,
        points=points
    )
